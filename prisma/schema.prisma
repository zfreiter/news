// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model instructions and fixes: https://authjs.dev/reference/adapter/prisma 
// Mongodb instructions: https://www.prisma.io/docs/concepts/database-connectors/mongodb
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  likes         Like[] 
  bookmarks     String[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]  
  comments      Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  imageUrl      String?
  authorImageUrl  String?
  publicId      String?
  categoryName  String?
  category      Category? @relation(fields: [categoryName], references: [categoryName])
  author        User     @relation(fields: [authorEmail], references: [email])
  authorEmail   String
  links         String[]
  comments      Comment[]
  likes         Like[]
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  authorImageUrl  String?
  postId        String   @db.ObjectId
  post          Post     @relation(fields: [postId], references: [id])
  authorEmail   String
  author        User     @relation(fields: [authorEmail], references: [email])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Like {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  like          Boolean
  postId        String   @db.ObjectId
  post          Post     @relation(fields: [postId], references: [id])
  authorEmail   String
  author        User     @relation(fields: [authorEmail], references: [email])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category{
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryName        String @unique
  posts               Post[]
  postIds             String[] @db.ObjectId
}